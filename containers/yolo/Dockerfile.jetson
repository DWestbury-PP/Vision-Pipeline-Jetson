# Jetson YOLO service with CUDA GPU acceleration  
FROM nvcr.io/nvidia/l4t-pytorch:r35.2.1-pth2.0-py3

# Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set working directory
WORKDIR /app

# Install essential system dependencies including libffi8 for OpenCV compatibility
RUN apt-get update && apt-get install -y --fix-missing \
    libffi7 \
    software-properties-common \
    || (apt-get update --fix-missing && apt-get install -y libffi7 software-properties-common) \
    && rm -rf /var/lib/apt/lists/* || true

# Download and install libffi8 manually for OpenCV compatibility
RUN cd /tmp && \
    wget -q http://ports.ubuntu.com/ubuntu-ports/pool/main/libf/libffi/libffi8_3.4.2-4_arm64.deb || \
    wget -q http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi8_3.4.2-4_arm64.deb || \
    echo "libffi8 download failed" && \
    (dpkg -i libffi8_*.deb 2>/dev/null || \
     (echo "libffi8 installation failed, using fallback symlink" && \
      ln -sf /usr/lib/aarch64-linux-gnu/libffi.so.7 /usr/lib/aarch64-linux-gnu/libffi.so.8)) && \
    rm -f /tmp/libffi8_*.deb || true

# Create non-root user
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

# L4T containers come with optimized OpenCV pre-installed

# Upgrade pip and clear any cache issues
RUN pip3 install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY containers/requirements-l4t-minimal.txt .
RUN pip3 install --no-cache-dir --timeout 300 --retries 3 -r requirements-l4t-minimal.txt

# Install ultralytics for YOLO inference (exclude opencv to avoid conflicts)
RUN pip3 install --no-cache-dir --timeout 600 --retries 5 \
    --no-deps ultralytics==8.0.120 && \
    pip3 install --no-cache-dir \
    matplotlib>=3.2.2 \
    Pillow>=7.1.2 \
    PyYAML>=5.3.1 \
    requests>=2.23.0 \
    scipy>=1.4.1 \
    tqdm>=4.64.0 \
    pandas>=1.1.4 \
    seaborn>=0.11.0 \
    || echo "Warning: Failed to install ultralytics, YOLO will run in mock mode"

# Copy application code
COPY services/ ./services/
COPY scripts/ ./scripts/
COPY env.example .env

# Create models directory (models will be bind-mounted at runtime)
RUN mkdir -p /app/models/yolo && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose any necessary ports (none for YOLO service)

# Run the YOLO service (OpenCV patch as fallback if needed)
CMD ["python3", "services/native/yolo_native.py"]
